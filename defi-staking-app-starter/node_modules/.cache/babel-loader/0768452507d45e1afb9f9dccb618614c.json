{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\maitr\\\\Documents\\\\GitHub\\\\Blockchain_starter_app\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Navbar.js';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main.js';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    // this will run first\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() //connect webapp to web3\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                //\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No etherem browser detected! check Metamask ');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // to load blockchain data\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                console.log(account, 'current account');\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                console.log(networkId, 'Network ID'); //bring/load tether contract\n\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 16;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 16:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log({\n                  balance: tetherBalance\n                }, 'tether balance');\n                _context3.next = 22;\n                break;\n\n              case 21:\n                window.alert('Error! Tether contract not deployed - no detected network!');\n\n              case 22:\n                //bring/load rwd contract\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 28;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 28:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                });\n                console.log({\n                  balance: rwdBalance\n                }, 'reward Balance');\n                _context3.next = 34;\n                break;\n\n              case 33:\n                window.alert('Error! RWD contract not deployed - no detected network!');\n\n              case 34:\n                //bring/load DecentralBank contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 45;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 40;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 40:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log({\n                  balance: stakingBalance\n                }, 'staking Balance');\n                _context3.next = 46;\n                break;\n\n              case 45:\n                window.alert('Error! DecentralBank contract not deployed - no detected network!');\n\n              case 46:\n                this.setState({\n                  loading: false\n                });\n\n              case 47:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //staking and unstaking function \n    // leverage decentralBank contract -> deposit and unstaking\n    //staking funtion\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tethterBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"textcenter\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 44\n          }\n        }, \"Loading... \") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tethterBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 135\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 14\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/maitr/Documents/GitHub/Blockchain_starter_app/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","console","log","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","balance","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","props","stakeTokens","amount","approve","_address","on","hash","depositTokens","send","from","tethterBalance","content","margin","maxWidth","minHeight"],"mappings":"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","sourcesContent":[" import React, {Component} from 'react'\r\n import './App.css'\r\n import Navbar from './Navbar.js';\r\n import Web3 from 'web3';\r\n import Tether from '../truffle_abis/Tether.json'\r\n import RWD from '../truffle_abis/RWD.json'\r\n import DecentralBank from '../truffle_abis/DecentralBank.json'\r\n import Main from './Main.js';\r\n \r\n class App extends Component {\r\n     // this will run first\r\n     async UNSAFE_componentWillMount() {\r\n         await this.loadWeb3();\r\n         await this.loadBlockchainData();\r\n     }\r\n     //connect webapp to web3\r\n     async loadWeb3() {\r\n         // if we detect ethereum then enable it\r\n         if(window.ethereum) \r\n         {\r\n             window.web3 =new Web3(window.ethereum);\r\n             await window.ethereum.enable()\r\n         } //\r\n         else if(window.web3)\r\n         {\r\n            window.web3 =new Web3(window.web3.currentProvider);\r\n         } \r\n         else\r\n         {\r\n            window.alert('No etherem browser detected! check Metamask ')\r\n         }\r\n     }\r\n     // to load blockchain data\r\n     async loadBlockchainData() {\r\n         const web3 = window.web3;\r\n         const account = await web3.eth.getAccounts();\r\n         this.setState({account: account[0]})\r\n         console.log(account, 'current account')\r\n         const networkId = await web3.eth.net.getId()\r\n         console.log(networkId, 'Network ID');\r\n         \r\n        //bring/load tether contract\r\n        const tetherData = Tether.networks[networkId]\r\n        if(tetherData)\r\n        {\r\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n            this.setState({tether})\r\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\r\n            this.setState({tetherBalance: tetherBalance.toString()})\r\n            console.log({balance: tetherBalance}, 'tether balance')\r\n        }\r\n        else\r\n        {\r\n            window.alert('Error! Tether contract not deployed - no detected network!')\r\n        }\r\n\r\n        //bring/load rwd contract\r\n        const rwdData = RWD.networks[networkId]\r\n        if(rwdData)\r\n        {\r\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\r\n            this.setState({rwd})\r\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\r\n            this.setState({rwdBalance: rwdBalance.toString()})\r\n            console.log({balance: rwdBalance}, 'reward Balance')\r\n        }\r\n        else\r\n        {\r\n            window.alert('Error! RWD contract not deployed - no detected network!')\r\n        }\r\n\r\n        //bring/load DecentralBank contract\r\n        const decentralBankData = DecentralBank.networks[networkId]\r\n        if(decentralBankData)\r\n        {\r\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n            this.setState({decentralBank})\r\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n            this.setState({stakingBalance: stakingBalance.toString()})\r\n            console.log({balance: stakingBalance}, 'staking Balance')\r\n        }\r\n        else\r\n        {\r\n            window.alert('Error! DecentralBank contract not deployed - no detected network!')\r\n        }\r\n\r\n        this.setState({loading: false})\r\n     }\r\n\r\n     //staking and unstaking function \r\n     // leverage decentralBank contract -> deposit and unstaking\r\n\r\n     //staking funtion\r\n     stakeTokens = (amount) => {\r\n         this.setState({loading: true});\r\n         this.state.tether.methods.approve(this.state.decentralBank._address, amount).on('transactionHash', (hash) =>{\r\n         this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) =>{\r\n             this.setState({loading: false});\r\n         })\r\n        })\r\n     }\r\n\r\n     constructor(props) {\r\n         super(props)\r\n         this.state = {\r\n             account: '0x0',\r\n             tether: {},\r\n             rwd: {},\r\n             decentralBank: {},\r\n             tethterBalance: '0',\r\n             rwdBalance: '0',\r\n             stakingBalance: '0',\r\n             loading: true\r\n         }\r\n     }\r\n     render(){\r\n         let content \r\n         { this.state.loading ? content  = <p id='loader' className='textcenter' style={{margin: '30px'}}>Loading... </p> : content = <Main \r\n             tetherBalance={this.state.tethterBalance}\r\n             rwdBalance = {this.state.rwdBalance}\r\n             stakingBalance = {this.state.stakingBalance}\r\n         />}\r\n        return (\r\n            <div>\r\n            <Navbar account={this.state.account}/>\r\n            {/* <h1>{console.log(this.state.loading)}</h1> */}\r\n             <div className='container-fluid mt-5'>\r\n                <div className='row'>\r\n                    <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth: '600px', minHeight: '100vm'}}>\r\n                        <div>\r\n                            {/* <Main/> */}\r\n                            {content}\r\n                        </div>\r\n                    </main>\r\n                </div>\r\n             </div>\r\n            </div> \r\n        )\r\n     }\r\n }\r\n\r\n export default App;"]},"metadata":{},"sourceType":"module"}